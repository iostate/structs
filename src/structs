#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32
}

impl Rectangle {
    // can take ownership
    fn area(&self) -> u32 {
        self.width * self.height
    }

    fn can_hold(&self, other: &Rectangle) -> bool {
        self.height > other.height && self.width > other.width
    }
}

impl Rectangle {
    fn square(size: u32) -> Rectangle {
        Rectangle { width: size, height: size }
    }
}

fn main() {
    let rect = Rectangle {
        width: 30,
        height: 50,
    };

    let rect2 = Rectangle {
        width: 20,
        height: 40,
    };
   
    let rect3 = Rectangle::square(20);

    println!("The area of rect3 is : {}", rect3.area());

    println!("rect can hold rect2 : {} ", rect.can_hold(&rect2));
    println!("rect can hold rect3 : {} ", rect.can_hold(&rect3));

    println!("rect: {:#?}", rect);

    println!(
        "The area of the rectangle is {} square pixels.",
        rect.area()
    );
}
// fn area(rectangle: &Rectangle) -> u32 {
//     rectangle.width * rectangle.height
// }

//fn area(width: u32, height: u32) -> u32 {
//    width * height
//}
